version: '3.9'

services:
  driver-svc:
    build:
      context: './'
      dockerfile: 'driver.Dockerfile'
    image: 'go-mts-driver-svc:latest'
    ports:
      - "8080:8080"
    depends_on:
      init-kafka:
        condition: service_started
      mongo1:
        condition: service_healthy
      mongo2:
        condition: service_started
      mongo3:
        condition: service_started
    environment:
      - DB_PASSWORD=password

  mongo1:
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27017" ]
    ports:
      - "27017:27017"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo1:27017',priority:1},{_id:1,host:'mongo2:27018',priority:0.5},{_id:2,host:'mongo3:27019',priority:0.5}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"

  mongo2:
    container_name: mongo2
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27018" ]
    ports:
      - "27018:27018"
    volumes:
      - "mongo2_data:/data/db"
      - "mongo2_config:/data/configdb"

  mongo3:
    container_name: mongo3
    image: mongo:7.0
    command: [ "--replSet", "rs0", "--bind_ip_all", "--port", "27019" ]
    ports:
      - "27019:27019"
    volumes:
      - "mongo3_data:/data/db"
      - "mongo3_config:/data/configdb"

  location-svc:
    image: 'go-mts-location-svc:latest'
    build:
      context: './'
      dockerfile: 'location.Dockerfile'
    ports:
      - "8084:8084"
    depends_on:
      location_db:
        condition: service_healthy
    environment:
      - LOGGER_LEVEL=release
      - DB_PASSWORD=password

  location_db:
    restart: always
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    # -U postgres -d postgres = -U {db user} -d {db name}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d location_db" ]
      interval: 5s
      timeout: 10s
      retries: 5
  #    command: ["bash", "-c", "pg_isready -U postgres -d postgres && psql -U postgres -d postgres -f /location-svc/migrations/000001_init.up.sql"]
  #    volumes:
  #      - ./.database/postgres/location_data:/var/lib/postgresql/data
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
  kafka:
    depends_on:
      - zookeeper
    container_name: kafka
    image: wurstmeister/kafka:latest
    ports:
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,OUTSIDE://0.0.0.0:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  init-kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      
      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic outbound --replication-factor 1 --partitions 1
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic inbound --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
networks:
  driver:
    name: driver

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mongo1_config:
  mongo2_config:
  mongo3_config:
