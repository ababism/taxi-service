// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Driver defines model for Driver.
type Driver struct {
	// Id Идентификатор водителя
	Id *string `json:"id,omitempty"`

	// Lat Latitude in decimal degrees
	Lat float32 `json:"lat"`

	// Lng Longitude in decimal degrees
	Lng float32 `json:"lng"`
}

// LatLngLiteral An object describing a specific location with Latitude and Longitude in decimal degrees.
type LatLngLiteral struct {
	// Lat Latitude in decimal degrees
	Lat float32 `json:"lat"`

	// Lng Longitude in decimal degrees
	Lng float32 `json:"lng"`
}

// GetDriversParams defines parameters for GetDrivers.
type GetDriversParams struct {
	// Lat Latitude in decimal degrees
	Lat float32 `form:"lat" json:"lat"`

	// Lng Longitude in decimal degrees
	Lng float32 `form:"lng" json:"lng"`

	// Radius Radius of serach
	Radius float32 `form:"radius" json:"radius"`
}

// UpdateDriverLocationJSONRequestBody defines body for UpdateDriverLocation for application/json ContentType.
type UpdateDriverLocationJSONRequestBody = LatLngLiteral

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /drivers)
	GetDrivers(c *gin.Context, params GetDriversParams)

	// (POST /drivers/{driver_id}/location)
	UpdateDriverLocation(c *gin.Context, driverId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDrivers operation middleware
func (siw *ServerInterfaceWrapper) GetDrivers(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDriversParams

	// ------------- Required query parameter "lat" -------------

	if paramValue := c.Query("lat"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument lat is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lat", c.Request.URL.Query(), &params.Lat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lat: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "lng" -------------

	if paramValue := c.Query("lng"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument lng is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lng", c.Request.URL.Query(), &params.Lng)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter lng: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Required query parameter "radius" -------------

	if paramValue := c.Query("radius"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument radius is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "radius", c.Request.URL.Query(), &params.Radius)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter radius: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDrivers(c, params)
}

// UpdateDriverLocation operation middleware
func (siw *ServerInterfaceWrapper) UpdateDriverLocation(c *gin.Context) {

	var err error

	// ------------- Path parameter "driver_id" -------------
	var driverId openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "driver_id", c.Param("driver_id"), &driverId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter driver_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateDriverLocation(c, driverId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/drivers", wrapper.GetDrivers)
	router.POST(options.BaseURL+"/drivers/:driver_id/location", wrapper.UpdateDriverLocation)
}
